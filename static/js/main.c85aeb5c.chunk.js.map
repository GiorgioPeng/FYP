{"version":3,"sources":["globalState.js","utils/dataReader.js","subPages/UploadPage.js","assets/Picture.js","subPages/IntroductionPage.js","utils/createChooseDialog.js","algorithm/linearInterpolation.js","algorithm/inverseDistanceWeightingInterpolation.js","algorithm/pearsonCoefficient.js","algorithm/hotDecking.js","algorithm/deleteNull.js","algorithm/chebyshev.js","components/Cluster.js","components/VariableChoose.js","utils/createGraph.js","components/MiniLinePicture.js","components/LinePicture.js","components/BarPicture.js","components/HistogramsPicture.js","components/SunburstPicture.js","components/ParallelCoordinatesPicture.js","components/DataOverviewTable.js","subPages/VisualizationPage.js","utils/createChooseBar.js","utils/machineLearn.js","subPages/MachineLearnPage.js","subPages/LearningResultPage.js","App.js","serviceWorker.js","index.js"],"names":["GloalStateContext","createContext","initState","data4Analyse","proprocessWay","column","timeColumn","labelColumn","inputColumn","finishChoose","windowSize","hiddenLayers","epochs","learnRate","trainingDataSize","finishSet","model","modelResult","anomalyDataPercentage","GlobalStateProvider","children","useState","state","setState","Provider","value","key","console","log","lastState","useGlobalState","useContext","dataReader","csvFile","updateState","fileReader","FileReader","readAsText","addEventListener","d3","result","d","columns","e","useStyles","makeStyles","theme","root","input","display","uploadButton","marginTop","marginBottom","height","width","justifyContent","alignItems","position","left","cursor","transform","fontSize","content","color","whiteSpace","UploadPage","classes","resetState","fileRef","React","createRef","className","accept","ref","onChange","file","current","files","id","type","htmlFor","Button","variant","component","startIcon","Picture","viewBox","preserveAspectRatio","version","fill","x1","y1","x2","y2","stopColor","offset","media","overflow","IntroductionPage","Card","CardContent","Typography","gutterBottom","chips","flexWrap","chip","margin","backgroundColor","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","CreateChooseDialog","props","f","element","multiple","disabled","Select","Input","renderValue","selected","map","Chip","label","index","MenuItem","coreAlgorithm","indexA","indexB","valueA","valueB","linearInterpolation","objectArr","indexes","nearIndexes","filter","isNaN","push","tempIndex","i","last","length","next","undefined","parseInt","parseFloat","inverseDistanceWeightingInterpolation","forEach","nullIndex","molecular","denominator","indexOf","Math","abs","getPearsonCoefficient","column1","column2","n","sum_1","sum","row","sum_2","sum_1_2","sum_1_1","sum_2_2","coefficient","sqrt","getCoefficient","pearsonCoefficientArr","columnCount","tempPearsonCoefficientArr","pearsonCoefficient","splice","indexOfAbsMax","arr","max","maxIndex","columnIndex","findLikely","columnData","inverse","likelyIndex","difference","Number","MAX_SAFE_INTEGER","tempDifference","MIN_SAFE_INTEGER","hotDecking","shift","deleteNull","getAnomalyDataIndex","dataArr","probability","bound","local_mean","mean","local_variance","variance","k","top","bottom","count","removeAnomaly","temp","JSON","parse","stringify","removedElement","hint","anomalyIndexes","Set","padding","container","ClusterBoard","relativeArr","chartRef","useRef","useEffect","tree","nodes","edges","array","embed","process","values","Paper","elevation","textAlign","maxWidth","dataSource","code","name","flexDirection","choose","fontWeight","require","text","button","IOSSwitch","withStyles","spacing","switchBase","palette","common","white","opacity","border","thumb","track","borderRadius","grey","transition","transitions","create","checked","focusVisible","Switch","focusVisibleClassName","disableRipple","iOSBoxShadow","marks","IOSSlider","backgroundImage","boxShadow","marginLeft","active","valueLabel","background","rail","mark","markActive","Slider","RemovedTable","align","title","Tooltip","TransitionComponent","Fade","TransitionProps","timeout","VariableChoose","isClear","setIsClear","relative","setRelative","setAnomalyDataPercentage","setRemovedElement","event","target","tempInputColumn","toFixed","Cluster","aria-label","newValue","valueLabelDisplay","FormControlLabel","control","tempDataObj","removeResult","createGraph","data","xaxis","yaxis","layout","plot_bgcolor","paper_bgcolor","font","family","size","createComplexGraph","graphContainer","MiniLinePicture","miniLinePictureRef","innerGraph","setInnerGraph","unpack","rows","axis","showline","zeroline","showgrid","mirror","ticklen","gridcolor","tickfont","showlegend","obj","x","y","mode","Object","assign","domain","anchor","showticklabels","hoverformat","overflowX","LinePicture","linePictureRef","graphArr","yLabel","BarPicture","barPictureRef","output","HistogramsPicture","histogramsPictureRef","compare","a","b","SunburstPicture","sunburstPictureRef","centerText","labels","sort","slice","parents","outsidetextfont","leaf","marker","line","l","r","t","ParallelCoordinatesPicture","parallelCoordinatesPictureRef","showscale","reversescale","colorscale","cmin","cmax","dimensions","constraintrange","min","range","tableContainer","DataOverviewTable","every","median","deviation","VisualizationPage","CreateChooseBar","step","defaultNum","setValue","update","Grid","item","xs","aria-labelledby","onBlur","inputProps","computeInputAndOutput","trainSimpleModel","learningRate","layers","data2","inputX","floor","inputY","inputLayerShape","lstmNeurons","lstmInputShape","lstmBatchSize","tf","reshape","add","dense","units","inputShape","targetShape","lstm","returnSequences","compile","optimizer","adam","loss","fit","batchSize","callbacks","tfvis","fitCallbacks","modelSummary","tab","trainComplexModel","data1","computeSimpleMoveAverage","index1","tempArr","index2","huberLoss","currentAverage","predictionsOfNow","isComplex","xInput","predictedResults","predict","Array","from","dataSync","paper","buttons","MachineLearnPage","modelTraining","setModelTraining","startTraining","onClick","card","alignContent","LearningResultPage","newData","setNewData","nextDayData","setNextDayData","tempData","prefix","suffix","NaN","modelPredictData","concat","divide","prefix2","App","useKbn","ConsoleBan","redirect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c85aeb5c.chunk.js","sourcesContent":["import React, { useState, createContext, useContext, } from 'react';\n\nconst GloalStateContext = createContext(null)\n\nconst initState = {\n    data4Analyse: '', // save the data which format is easy to analyse\n    proprocessWay: 'Delelt Null', // the way of data preprocess\n    column: [], // the column name array of data\n    timeColumn: '', // the time column name of the data\n    labelColumn: '', // the output/label column of the data\n    inputColumn: [], // the feature/input column of the data\n    finishChoose: false, // whether the user finish visualization settings\n    windowSize: 20, // the window size of the data \n    hiddenLayers: 4, // the numbers of hidden layers\n    epochs: 20,   // the numbers of training epochs\n    learnRate: 0.05,  // learning \n    trainingDataSize: 80,  // the size of training\n    finishSet: false, // whether the user finish the setting of training neural network\n    model: '', // the trained model\n    modelResult: '', // the result of the model\n    anomalyDataPercentage:0 // the percentage of the anomaly data\n    /**\n     * [columns...]\n     * [row data]\n     * [row data]\n     */\n};\nexport function GlobalStateProvider({ children }) {\n    const [state, setState] = useState(initState);\n\n    const updateState = (key, value) => {\n        console.log(key, value)\n        setState((lastState) => {\n            return {\n                ...lastState,\n                [key]: value\n            }\n        })\n    }\n    const resetState = () => {\n        setState(initState)\n    }\n    return (\n        <GloalStateContext.Provider value={[state, updateState, resetState]}>\n            {children}\n        </GloalStateContext.Provider>\n    )\n}\nexport function useGlobalState() {\n    return useContext(GloalStateContext)\n}","import * as d3 from \"d3\";\n\n/**\n * load the uploaded data and update thte globale state\n * @param {file} csvFile the uploaded file\n * @param {function} updateState the update state function\n */\nconst dataReader = (csvFile, updateState) => {\n    try {\n        const fileReader = new FileReader()\n        const charset = 'utf-8'\n        fileReader.readAsText(csvFile, charset)\n        fileReader.addEventListener(\"load\", () => {\n            let data4Analyse = (d3.csvParse(fileReader.result, function (d) {\n                return d;\n            }))\n            updateState('column', data4Analyse.columns)\n            updateState('data4Analyse', data4Analyse)\n        });\n    }\n    catch (e) {\n        console.log(e)\n    }\n\n}\nexport default dataReader","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport dataReader from '../utils/dataReader'\nimport { useGlobalState } from '../globalState'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            // margin: theme.spacing(1),\n        },\n    },\n\n    input: {\n        display: 'none',\n    },\n    uploadButton: {\n        marginTop:'10px',\n        marginBottom:'10px',\n        height: 40,\n        width: 250,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        position: 'relative',\n        left: '50%',\n        cursor: 'pointer',\n        transform: 'translateX(-50%)',\n        '& > p': {\n            fontSize: '14px',\n            position: 'relative',\n        },\n        '&:hover': {\n            '&:after': {\n                content: \"'Only .csv format supporting now!'\",\n                position: 'absolute',\n                fontSize: '18px',\n                color: 'red',\n                // top: '80%',\n                left: '150%',\n                transform: 'translateX(-50%)',\n                whiteSpace: 'nowrap',\n            }\n        }\n    },\n}));\n\nfunction UploadPage() {\n    const classes = useStyles();\n    const [, updateState, resetState] = useGlobalState()\n    const fileRef = React.createRef()\n\n    const readCSV = () => {\n        resetState()\n        const file = fileRef.current.files[0]\n        dataReader(file, updateState)\n    }\n\n    return (\n        <div className={classes.root}>\n            <input accept=\".csv\" ref={fileRef} onChange={readCSV} className={classes.input} id=\"icon-button-file\" type=\"file\" />\n            <label className={classes.uploadButton} htmlFor=\"icon-button-file\">\n                <Button variant=\"contained\" color=\"primary\" component=\"span\"  startIcon={<CloudUploadIcon />}>\n                    Upload Dataset\n                </Button>\n            </label>\n        </div>\n    );\n}\n\nexport default UploadPage\n","import React from 'react'\n\nfunction Picture() {\n    return (\n        <svg className=\"canvas\" viewBox=\"0 0 1920 1080\" preserveAspectRatio=\"xMaxYMid slice\" version=\"1.1\" >\n            <rect width=\"1920\" height=\"1080\" fill=\"hsl(153, 65%, 15%)\">\n            </rect>\n            <defs>\n                <linearGradient x1=\"0.5\" y1=\"0\" x2=\"0\" y2=\"1\" id=\"SvgjsLinearGradient1196\">\n                    <stop stopColor=\"#288a5e\" offset=\"0\">\n                    </stop>\n                    <stop stopColor=\"#060c14\" offset=\"0.1\">\n                    </stop>\n                </linearGradient>\n                <linearGradient x1=\"0.5\" y1=\"0\" x2=\"0\" y2=\"1\" id=\"SvgjsLinearGradient1197\">\n                    <stop stopColor=\"#288a5e\" offset=\"0\">\n                    </stop>\n                    <stop stopColor=\"#060c14\" offset=\"0.22857142857142856\">\n                    </stop>\n                </linearGradient>\n                <linearGradient x1=\"0.5\" y1=\"0\" x2=\"0\" y2=\"1\" id=\"SvgjsLinearGradient1198\">\n                    <stop stopColor=\"#288a72\" offset=\"0\">\n                    </stop>\n                    <stop stopColor=\"#060914\" offset=\"0.3571428571428571\">\n                    </stop>\n                </linearGradient>\n                <linearGradient x1=\"0.5\" y1=\"0\" x2=\"0\" y2=\"1\" id=\"SvgjsLinearGradient1199\">\n                    <stop stopColor=\"#c0f2ef\" offset=\"0\">\n                    </stop>\n                    <stop stopColor=\"#4249d7\" offset=\"0.48571428571428565\">\n                    </stop>\n                </linearGradient>\n                <linearGradient x1=\"0.5\" y1=\"0\" x2=\"0\" y2=\"1\" id=\"SvgjsLinearGradient1200\">\n                    <stop stopColor=\"#c0f2d1\" offset=\"0\">\n                    </stop>\n                    <stop stopColor=\"#42a3d7\" offset=\"0.6142857142857142\">\n                    </stop>\n                </linearGradient>\n                <linearGradient x1=\"0.5\" y1=\"0\" x2=\"0\" y2=\"1\" id=\"SvgjsLinearGradient1201\">\n                    <stop stopColor=\"#c0f2db\" offset=\"0\">\n                    </stop>\n                    <stop stopColor=\"#4285d7\" offset=\"0.7428571428571429\">\n                    </stop>\n                </linearGradient>\n                <linearGradient x1=\"0.5\" y1=\"0\" x2=\"0\" y2=\"1\" id=\"SvgjsLinearGradient1202\">\n                    <stop stopColor=\"#c0f2e5\" offset=\"0\">\n                    </stop>\n                    <stop stopColor=\"#4267d7\" offset=\"0.8714285714285713\">\n                    </stop>\n                </linearGradient>\n            </defs>\n            <path d=\"M0,-506.77340543269145C59.26145827850629,-496.7278828814427,255.4901428494137,-482.7098073624625,355.5687496710377,-446.5002701251991C455.64735649266174,-410.2907328879357,506.7034076171448,-316.8838256930635,600.471640929744,-289.51618200911093C694.2398742423433,-262.14853832515837,804.9731422179036,-308.0046646992008,918.178149546633,-282.29440802148355C1031.3831568753624,-256.5841513437663,1162.4496268103608,-175.173613368331,1279.7016849021204,-135.25464194280738C1396.95374299388,-95.33567051728377,1514.9741122475443,-70.86078555336121,1621.690498097191,-42.78057946834189C1728.4068839468378,-14.700373383322567,1870.2817496828652,20.55873222803347,1920,33.22659456730854L 1920 1080 L 0 1080 Z\" fill=\"url(#SvgjsLinearGradient1196)\">\n            </path>\n            <path d=\"M0,-433.76239083957404C51.51882549960332,-419.92018418711194,204.3030325319853,-376.4085157560768,309.1129529976199,-350.70915092480146C413.9228734632545,-325.00978609352615,513.5249113995557,-314.91562582691574,628.8595227938076,-279.56620185192213C744.1941341880596,-244.21677787692855,889.3950828445552,-181.85913418883405,1001.1206213631317,-138.6126070748399C1112.8461598817082,-95.36607996084575,1194.8412981664055,-42.22443493434153,1299.2127539052667,-20.087039167957244C1403.584209644128,2.0503565984270438,1523.8848147805102,-29.223292912217097,1627.349355796299,-5.7882324765341835C1730.813896812088,17.64682795914873,1871.2248926327165,99.47139745902784,1920,120.52332344614025L 1920 1080 L 0 1080 Z\" fill=\"url(#SvgjsLinearGradient1197)\">\n            </path>\n            <path d=\"M0,-321.2434050246518C68.34803429983727,-309.61691829513273,288.06772869355746,-296.0564900738598,410.08820579902357,-251.48448464753736C532.1086829044897,-206.91247922121494,606.2475533289844,-100.66107890774252,732.1228626327968,-53.8113724667172C857.9981719366092,-6.961666025691883,1036.5882467850142,1.5852466394847262,1165.340061621898,29.613753998614577C1294.0918764587818,57.64226135774443,1378.857095257749,78.07396009670155,1504.6337516540993,114.35967168806192C1630.4104080504496,150.64538327942228,1850.77229194235,225.1666315703243,1920,247.3280235467768L 1920 1080 L 0 1080 Z\" fill=\"url(#SvgjsLinearGradient1198)\">\n            </path>\n            <path d=\"M0,-151.28081860349127C64.63627607949805,-139.3377360851051,257.46251723356755,-108.60016398984862,387.8176564769883,-79.62232349317415C518.1727957204091,-50.644482996499676,655.6066461721915,-13.846940621955746,782.1308354605245,22.586224376555563C908.6550247488575,59.01938937506687,1010.9980616221864,100.15664565431041,1146.9627922069865,138.9766664978937C1282.9275227917865,177.79668734147697,1469.0796843371563,206.73973981209554,1597.9192189693251,255.5063494380552C1726.758753601494,304.27295906401486,1866.3198698282208,402.2313284510522,1920,431.5763242536516L 1920 1080 L 0 1080 Z\" fill=\"url(#SvgjsLinearGradient1199)\">\n            </path>\n            <path d=\"M0,-18.98976840299884C69.82069828158214,-4.866900089992269,295.042955853834,31.455620732398877,418.92418968949283,65.7474414750406C542.8054235251517,100.03926221768234,623.890400474473,146.4029727090791,743.287403013953,186.76115605285153C862.6844055534331,227.11933939662396,998.1251575056722,268.71606943001797,1135.306204926373,307.8965415376752C1272.487252347074,347.07701364533244,1435.591388359221,376.8012308317643,1566.3736875381587,421.8439886987948C1697.1559867170965,466.8867465658253,1861.0622812563597,552.1015720663478,1920,578.1530887398584L 1920 1080 L 0 1080 Z\" fill=\"url(#SvgjsLinearGradient1200)\">\n            </path>\n            <path d=\"M0,88.88394890239394C61.025141337539424,107.22876929202857,237.40453725003468,161.83148168933016,366.15084802523654,198.95287124020177C494.89715880043843,236.07426079107339,643.146797949468,267.266301126298,772.4778646512111,311.61228620762364C901.8089313529542,355.9582712889493,1018.3670202966273,422.0071690273888,1142.1372482356953,465.02878172815565C1265.9074761747634,508.0503944289225,1385.4554403249022,530.5280059784232,1515.0992322856196,569.7419624122248C1644.743024246337,608.9559188460264,1852.51653871427,678.5507606778419,1920,700.3125203309654L 1920 1080 L 0 1080 Z\" fill=\"url(#SvgjsLinearGradient1201)\">\n            </path>\n            <path d=\"M0,277.48115438388896C45.18154184087917,291.3291738427334,185.2407875318138,329.2574903654787,271.08925104527503,360.5692711369554C356.9377145587363,391.88105190843214,417.9628245160045,431.5898203645502,515.0907810807673,465.3518390127491C612.2187376455302,499.11385766094804,753.4063448829422,536.1504237006809,853.8569904338519,563.141383026149C954.3076359847616,590.1323423516171,1028.3445250262716,606.6675947480468,1117.7946543862254,627.2975949655579C1207.244783746179,647.927595183069,1307.1092368713564,650.0498435564526,1390.5577665935743,686.9213843312158C1474.0062963157923,723.792925105979,1530.2454604851284,812.4811636529769,1618.4858327195327,848.5268396141367C1706.726204953937,884.5725155752966,1869.7476387865888,894.0840066841685,1920,903.1954400981748L 1920 1080 L 0 1080 Z\" fill=\"url(#SvgjsLinearGradient1202)\">\n            </path>\n        </svg>)\n}\n\nexport default Picture\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport TopPicture from '../assets/Picture'\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    // margin: '15px auto',\n    marginBottom: 0\n\n  },\n  media: {\n    height: 400,\n    overflow: 'hidden'\n  },\n}));\n\nfunction IntroductionPage() {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <div className={classes.media}>\n      <TopPicture/>\n      </div>\n      <CardContent>\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n          Privacy Preserving Time Series Data Mining Platform based on Front-End\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          In the platform, users can upload their own datasets to do data mining without care about the privacy leaking problem.\n          Because the platform is only depende on the front-end, that mean when the page finishes loading, users can run the\n          platform offline. In this platform, Users can finish data preprocess, data visualization, machine learning(model training and prediction).\n          There is a really high freedom of the platform, users can do data mining by different method according different dataset. Now, have a try!\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default IntroductionPage\n","import React from 'react'\nimport Select from '@material-ui/core/Select';\nimport Chip from '@material-ui/core/Chip';\nimport Input from '@material-ui/core/Input';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    chips: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    chip: {\n        margin: 2,\n        backgroundColor:'#f8edeb'\n    }\n}));\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n    PaperProps: {\n        style: {\n            backgroundColor:'#fcefb4',\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n            width: 300,\n        },\n    },\n};\n/**\n * create a choose dialog\n * @param {Array} value the value which should be binded to the dialog\n * @param {Function} f the callback of modify the value of the dialog\n * @param {Array} element the choosable value, an array\n * @param {Boolean} multiple whether the dialog allow multiple choose\n * @returns {HTMLelement} the HTML element of the choose dialog\n */\nconst CreateChooseDialog = (props) => {\n    const { value, f, element, multiple, disabled } = props\n    const classes = useStyles()\n    return (\n        <Select\n            disabled={disabled}\n            multiple={multiple}\n            value={value}\n            onChange={f}\n            input={<Input />}\n            MenuProps={MenuProps}\n            renderValue={(selected) => (\n                <div className={classes.chips}>\n                    {\n                        selected.map ?\n                            selected.map((value) => (\n                                <Chip key={value} label={value} className={classes.chip} />\n                            ))\n                            :\n                            <div className={classes.chips}>\n                                <Chip key={selected} label={selected} className={classes.chip} />\n                            </div>\n                    }\n                </div>\n            )}\n        >\n            {element.map((value, index) => (\n                <MenuItem key={index} value={value} >\n                    {value}\n                </MenuItem>\n            ))}\n        </Select>\n    )\n}\nexport default CreateChooseDialog","/**\n * use linear interpolation to fill the data\n * @param {Array} objectArr the origin data array\n * @param {String} column the name of the column which should be filled\n * @return {Array} the result data arry\n */\nconst linearInterpolation = (objectArr, column) => {\n    const indexes = [] // store the index of empty value\n    const nearIndexes = [] // store the nearest index of non-empty value\n    objectArr.filter((value, index) => {\n        if (isNaN(value[column]) || !value[column]) {\n            indexes.push(index)\n            const tempIndex = {} \n            for (let i = index - 1; i >= 0; i--) {\n                if (isNaN(objectArr[i][column]) || !value[column]) { // find before non-empty value index\n                    tempIndex.last = i\n                    break\n                }\n            }\n\n            for (let i = index + 1; i < objectArr.length; i++) {\n                if (isNaN(objectArr[i][column]) || !value[column]) {// find next non-empty value index\n                    tempIndex.next = i\n                    break\n                }\n            }\n            if (tempIndex.last === undefined) {\n                tempIndex.last = -1\n            }\n            if (!tempIndex.next === undefined) {\n                tempIndex.next = -1\n            }\n            nearIndexes.push(tempIndex)\n        }\n        return ''\n    })\n    if (objectArr.length > 1) {\n        for (let i = 0; i < indexes.length; i++) {\n            if (nearIndexes[i]['last'] === -1) {\n                objectArr[indexes[i]][column] = objectArr[nearIndexes[i]['next']][column]\n                continue\n            }\n            if (nearIndexes[i]['next'] === -1) {\n                objectArr[indexes[i]][column] = objectArr[nearIndexes[i]['last']][column]\n                continue\n            }\n            objectArr[indexes[i]][column] = coreAlgorithm(\n                indexes[i],\n                parseInt(nearIndexes[i]['last']),\n                parseInt(nearIndexes[i]['next']),\n                parseFloat(objectArr[nearIndexes[i]['last']][column]),\n                parseFloat(objectArr[nearIndexes[i]['next']][column])\n            )\n        }\n    }\n    return objectArr\n}\n\n/**\n * compute the value which should be filled to the empty position\n * @param {Number} index the index of empty value\n * @param {Number} indexA last non-empty value index\n * @param {Number} indexB next non-empty value index\n * @param {Number} valueA last nont-empty value\n * @param {Number} valueB next non-empty value\n * @returns {Number} the value of computing result\n */\n\nconst coreAlgorithm = (index, indexA, indexB, valueA, valueB) => {\n    return ((valueB - valueA) / (indexB - indexA)) * (index - indexA) + valueA\n}\nexport default linearInterpolation","/**\n * use inverse distance weighting interpolation to fill the missing data\n * @param {Array} objectArr the origin data array\n * @param {String} column the name of column which should be filled \n * @return {Array} the result data array\n */\nconst inverseDistanceWeightingInterpolation = (objectArr, column) => {\n    const indexes = [] // store the index of empty value\n    objectArr.filter((value, index) => {\n        if (isNaN(value[column]) || !value[column]) {\n            indexes.push(index)\n        }\n        return ''\n    })\n    indexes.forEach(nullIndex => {\n        let molecular = 0\n        let denominator = 0\n        for (let i = 0; i < objectArr.length; i++) {\n            if (indexes.indexOf(i) === -1) { // if current cell is not missing\n                molecular += parseFloat(objectArr[i][column]) / Math.abs(nullIndex - i)\n                denominator += 1 / Math.abs(nullIndex - i)\n            }\n        }\n        objectArr[nullIndex][column] = molecular / denominator\n    })\n    return objectArr\n};\n\nexport default inverseDistanceWeightingInterpolation","import { sum } from 'd3-array';\n/**\n * get the pearson ceofficient of two columns\n * @param {Array} objectArr the data \n * @param {String} column1 the name of the first column\n * @param {String} column2 the name of the seconde column\n * @returns {Number} the pearson ceofficient of the two columns\n */\nconst getPearsonCoefficient = (objectArr, column1, column2) => {\n    const n = objectArr.length\n    const sum_1 = sum(objectArr, row => parseFloat(row[column1]))\n    const sum_2 = sum(objectArr, row => parseFloat(row[column2]))\n    let sum_1_2 = 0\n    objectArr.forEach((row) => {\n        if (!isNaN(row[column1]) && !isNaN(row[column2]) && row[column1] && row[column2]) {\n            sum_1_2 += parseFloat(row[column1]) * parseFloat(row[column2])\n            return\n        }\n    })\n\n    let sum_1_1 = 0\n    let sum_2_2 = 0\n    objectArr.forEach((row) => {\n        if (!isNaN(row[column1]) && !isNaN(row[column2]) && row[column1] && row[column2]) {\n            sum_1_1 += parseFloat(row[column1]) ** 2\n            sum_2_2 += parseFloat(row[column2]) ** 2\n        }\n    })\n\n    const molecular = sum_1_2 - (sum_1 * sum_2 / n)\n    const denominator = Math.sqrt((sum_1_1 - (sum_1 ** 2) / n) * (sum_2_2 - (sum_2 ** 2) / n))\n    const coefficient = molecular / denominator\n    return isNaN(coefficient) ? 0 : coefficient\n}\nexport default getPearsonCoefficient","import pearsonCoefficient from './pearsonCoefficient'\n/**\n * use hot decking to filled the missing data\n * @param {Array} objectArr the origin data array\n * @param {Array} columns a array of names of all column which are features\n * @returns {Array} the result of filled data array\n */\nconst hotDecking = (objectArr, columns) => {\n    const pearsonCoefficientArr = getCoefficient(objectArr, columns)\n    for (const column of columns) { // line by line\n        const indexes = [] // store the indexes of empty value\n        objectArr.filter((value, index) => {\n            if (isNaN(value[column]) || !value[column]) {\n                indexes.push(index)\n            }\n            return ''\n        })\n        const { columnIndex, coefficient } = pearsonCoefficientArr.shift()\n        if (indexes.length === 0) { // if no data missing\n            continue\n        }\n        else {\n            indexes.forEach(i => {\n                const columnData = objectArr.map((e) => { return e[columns[columnIndex]] })\n                const likelyIndex = findLikely(i, columnData, coefficient > 0 ? true : false)\n                objectArr[i][column] = objectArr[likelyIndex][column]\n            })\n        }\n    }\n    return objectArr\n};\n\n/**\n * get peason ceofficient between each two feature columns\n * @param {Array} objectArr the origin data array\n * @param {Array} columns a array of names of all column which are features\n * @returns {Array} a array of object which include the pearson ceoffient and correpsonding two indexes of columns\n */\nconst getCoefficient = (objectArr, columns) => {\n    const pearsonCoefficientArr = [] // store the corresponding indexes of the columns\n    for (let columnCount = 0; columnCount < columns.length; columnCount++) {\n\n        const tempPearsonCoefficientArr = [] // store a column and other columns pearson ceofficient\n\n        for (let index = 0; index < columns.length; index++) { \n            if (index === columnCount) { // skip when itself\n                continue;\n            }\n            else {\n                tempPearsonCoefficientArr.push(pearsonCoefficient(objectArr, columns[columnCount], columns[index]))\n            }\n        }\n        tempPearsonCoefficientArr.splice(columnCount, 0, 0)\n        pearsonCoefficientArr.push(indexOfAbsMax(tempPearsonCoefficientArr))\n    }\n    return pearsonCoefficientArr\n}\n\n/**\n * get the index of maximum value (absolute) of a array\n * @param {Array} arr the aim array\n * @returns {Object} an object include the maximum value and its index\n */\nfunction indexOfAbsMax(arr) {\n    if (arr.length === 0) {\n        return -1;\n    }\n    let max = Math.abs(arr[0]);\n    let maxIndex = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (Math.abs(arr[i]) > max) {\n            maxIndex = i;\n            max = Math.abs(arr[i]);\n        }\n    }\n    return { columnIndex: maxIndex, coefficient: arr[maxIndex] };\n}\n\n/**\n * find the index of most likely value of the missing value in a column\n * @param {Number} index the index of missing data\n * @param {Array} columnData the data of column\n * @param {Boolean} inverse a boolean value of Positive or negative correlation\n * @returns {Number} the index of most likely value\n */\nconst findLikely = (index, columnData, inverse) => {\n    let likelyIndex = -1 // aim index\n    const value = columnData[index]\n    if (inverse) { // positive correlation\n        let difference = Number.MAX_SAFE_INTEGER \n        for (let i = 0; i < columnData.length; i++) {\n\n            if (isNaN(columnData[i]) || !columnData[i]) // skip for missing data\n                continue\n\n            if (i !== index) {\n                let tempDifference = Math.abs(parseFloat(columnData[i]) - value)\n                if (tempDifference < difference) {\n                    difference = tempDifference\n                    likelyIndex = i\n                }\n            }\n\n        }\n    }\n    else {  // negative correlation\n        let difference = Number.MIN_SAFE_INTEGER \n        for (let i = 0; i < columnData.length; i++) {\n\n            if (isNaN(columnData[i]) || !columnData[i]) // skip for missing data\n                continue\n\n            if (i !== index) {\n                let tempDifference = Math.abs(parseFloat(columnData[i]) - value)\n                if (tempDifference > difference) {\n                    difference = tempDifference\n                    likelyIndex = i\n                }\n            }\n\n        }\n    }\n    return likelyIndex\n}\n\nexport default hotDecking;","/**\n * delete empty row of a data array\n * @param {Array} objectArr the origin data\n * @param {String} column the aim column name\n * @return {Array} the result data array\n */\nconst deleteNull = (objectArr, column) => {\n    const indexes = []\n    objectArr.filter((value, index) => {\n        if (isNaN(value[column]) || !value[column]) {\n            indexes.push(index)\n        }\n        return ''\n    })\n    indexes.forEach((value, index) => {\n        objectArr.splice(value - index, 1);\n    })\n    return objectArr\n};\n\nexport default deleteNull;","import { mean, variance } from 'd3-array';\n\n/**\n * get the anomaly data index array\n * @param {Array} dataArr the origin data\n * @param {Number} probability percentage of anomaly data\n * @param {String} column the aim column name\n * @returns {Array} the array of anomaly data index\n */\nconst getAnomalyDataIndex = (dataArr, probability, column) => {\n    probability = probability / 100\n    const bound = {}\n    const indexes = []\n    const local_mean = mean(dataArr, (d) => parseFloat(d[column]))\n    const local_variance = variance(dataArr, (d) => parseFloat(d[column]))\n    const k = Math.sqrt(local_variance / probability)\n    bound.top = local_mean + k\n    bound.bottom = local_mean - k\n    let count = 0;\n    for (const row of dataArr) {\n        if (row[column] <= bound.bottom || row[column] >= bound.top)\n            indexes.push(count)\n        count++;\n    }\n    return { indexes: indexes, bound: bound }\n}\n\n/**\n * remove the anomaly data of a data array\n * @param {Array} dataArr the origin data array\n * @param {Number} probability the percentage of anomaly data\n * @param {Array} columns the array of names of all column which should remove the anomaly data\n * @returns {Object} the result data array, the removed elements and bound detail\n */\nconst removeAnomaly = (dataArr, probability, columns) => {\n    const result = JSON.parse(JSON.stringify(dataArr))\n    const removedElement = []\n    const hint = []\n    let anomalyIndexes = []\n    let temp;\n    for (const column of columns) {\n        temp = getAnomalyDataIndex(dataArr, probability, column[0])\n        anomalyIndexes.push(...temp.indexes)\n        hint.push({ column: column[0], bound: temp.bound })\n    }\n    anomalyIndexes = [...new Set(anomalyIndexes)] // duplicate removal\n    let count = 0;\n    for (const index of anomalyIndexes) {\n        removedElement.push(...result.splice(index + count, 1))\n        count--;\n    }\n    // console.log(result,removedElement)\n    return { result: result, removedElement: removedElement, hint: hint }\n}\nexport default removeAnomaly","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { BaseTable } from 'ali-react-table'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography';\nimport embed from 'vega-embed';\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        marginTop: '20px',\n        padding: '5px',\n        backgroundColor:'#edf2fb'\n    },\n    container: {\n        display: 'flex',\n        justifyContent: 'space-around',\n        alignItems: 'center'\n    }\n}));\n\nconst ClusterBoard = (props) => {\n    const { relativeArr } = props\n    const chartRef = React.useRef()\n    const classes = useStyles()\n    React.useEffect(() => {\n        const tree = {\n            nodes: [],\n            edges: []\n        }\n        relativeArr.forEach((element, index, array) => {\n            if (Math.abs(element.pearsonCoefficient) > 0.4) {\n                tree.edges.push({\n                    \"source\": 0,\n                    \"target\": index + 1,\n                    \"value\": element.pearsonCoefficient === 0 ? 0 : 1 / element.pearsonCoefficient,\n                    \"inCutEdge\": Math.abs(element.pearsonCoefficient) > 0.7 ? true : false\n                })\n            }\n            if (index === 0) {\n                tree.nodes.push(\n                    {\n                        \"name\": element.column1,\n                        \"index\": 0,\n                        \"value\": 1,\n                        'group': 0\n                    })\n            }\n            tree.nodes.push(\n                {\n                    \"name\": element.column2,\n                    \"index\": index + 1,\n                    \"value\": 1,\n                    'group': index + 1\n                })\n        })\n        if (chartRef.current && relativeArr.length !== 0) {\n            embed(chartRef.current, {\n                // \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n                \"$schema\": process.env.PUBLIC_URL + \"/schema/vega/v5.json\",\n                \"width\": 600,\n                \"height\": 400,\n                \"padding\": 5,\n                \"autosize\": \"fit\",\n\n                \"signals\": [\n                    { \"name\": \"cx\", \"update\": \"width / 2\" },\n                    { \"name\": \"cy\", \"update\": \"height / 2\" },\n                    {\n                        \"description\": \"State variable for active node fix status.\",\n                        \"name\": \"fix\", \"value\": false,\n                        \"on\": [\n                            {\n                                \"events\": \"text:mouseout[!event.buttons], window:mouseup\",\n                                \"update\": \"false\"\n                            },\n                            {\n                                \"events\": \"text:mouseover\",\n                                \"update\": \"fix || true\"\n                            },\n                            {\n                                \"events\": \"[text:mousedown, window:mouseup] > window:mousemove!\",\n                                \"update\": \"xy()\",\n                                \"force\": true\n                            }\n                        ]\n                    },\n                    {\n                        \"description\": \"Graph node most recently interacted with.\",\n                        \"name\": \"node\", \"value\": null,\n                        \"on\": [\n                            {\n                                \"events\": \"text:mouseover\",\n                                \"update\": \"fix === true ? item() : node\"\n                            }\n                        ]\n                    },\n                    {\n                        \"description\": \"Flag to restart Force simulation upon data changes.\",\n                        \"name\": \"restart\", \"value\": false,\n                        \"on\": [\n                            { \"events\": { \"signal\": \"fix\" }, \"update\": \"fix && fix.length\" }\n                        ]\n                    }\n                ],\n\n                \"data\": [\n                    {\n                        \"name\": \"node-data\",\n                        values: tree.nodes,\n                    },\n                    {\n                        \"name\": \"link-data\",\n                        values: tree.edges\n                    }\n                ],\n\n                \"scales\": [\n                    {\n                        \"name\": \"color\",\n                        \"type\": \"ordinal\",\n                        \"domain\": { \"data\": \"node-data\", \"field\": \"group\" },\n                        \"range\": { \"scheme\": \"redpurple\" }\n                    },\n                    {\n                        \"name\": \"colorEdge\",\n                        \"type\": \"quantize\",\n                        \"domain\": { \"data\": \"link-data\", \"field\": \"value\" },\n                        \"range\": { \"scheme\": \"viridis\" }\n                    }\n                ],\n\n                \"marks\": [\n                    {\n                        \"name\": \"nodes\",\n                        \"type\": \"text\",\n                        \"zindex\": 1,\n\n                        \"from\": { \"data\": \"node-data\" },\n                        \"on\": [\n                            {\n                                \"trigger\": \"fix\",\n                                \"modify\": \"node\",\n                                \"values\": \"fix === true ? {fx: node.x, fy: node.y} : {fx: fix[0], fy: fix[1]}\"\n                            },\n                            {\n                                \"trigger\": \"!fix\",\n                                \"modify\": \"node\", \"values\": \"{fx: null, fy: null}\"\n                            }\n                        ],\n\n                        \"encode\": {\n                            \"enter\": {\n                                \"fill\": { \"scale\": \"color\", \"field\": \"group\" },\n                                \"text\": { \"field\": \"name\" },\n                                \"fontSize\": { \"value\": 16 },\n                                \"fontWeight\": { \"value\": 600 }\n                            },\n                            \"update\": {\n                                \"cursor\": { \"value\": \"pointer\" }\n                            }\n                        },\n\n                        \"transform\": [\n                            {\n                                \"type\": \"force\",\n                                \"iterations\": 300,\n                                \"restart\": { \"signal\": \"restart\" },\n                                \"signal\": \"force\",\n                                \"forces\": [\n                                    { \"force\": \"center\", \"x\": { \"signal\": \"cx\" }, \"y\": { \"signal\": \"cy\" } },\n                                    { \"force\": \"collide\" },\n                                    { \"force\": \"nbody\" },\n                                    { \"force\": \"link\", \"links\": \"link-data\" }\n                                ]\n                            }\n                        ]\n                    },\n                    {\n                        \"type\": \"path\",\n                        \"from\": { \"data\": \"link-data\" },\n                        \"interactive\": false,\n                        \"encode\": {\n                            \"update\": {\n                                \"stroke\": {\n                                    \"scale\": \"colorEdge\",\n                                    \"field\": \"value\"\n                                },\n                                \"strokeWidth\": { \"value\": 1 },\n                                \"opacity\": { \"value\": 0.9 }\n                            },\n                        },\n                        \"transform\": [\n                            {\n                                \"type\": \"linkpath\",\n                                \"require\": { \"signal\": \"force\" },\n                                \"shape\": \"line\",\n                                \"sourceX\": \"datum.source.x\", \"sourceY\": \"datum.source.y\",\n                                \"targetX\": \"datum.target.x\", \"targetY\": \"datum.target.y\"\n                            }\n                        ]\n                    }\n                ]\n            })\n        }\n    }, [relativeArr])\n    return (\n        <>\n            {relativeArr.length !== 0 ?\n                <Paper elevation={3} className={classes.root}>\n                    <Typography variant={'subtitle2'} color=\"textSecondary\" style={{ textAlign: 'center' }}>Correlation Between Each Feature and Output</Typography>\n                    <div className={classes.container}>\n                        <div ref={chartRef} />\n                        <BaseTable\n                            style={{ maxWidth: 300, maxHeight: 400, overflow: 'auto' }}\n                            dataSource={relativeArr}\n                            columns={[\n                                {\n                                    code: 'column1', width: 100, name: 'column 1'\n                                },\n                                {\n                                    code: 'column2', width: 100, name: 'column 2'\n                                },\n                                {\n                                    code: 'pearsonCoefficient', width: 100, name: 'relative coefficient'\n                                },\n                            ]}\n                        />\n                    </div>\n                </Paper >\n                :\n                ''\n            }\n        </>\n    )\n}\n\nexport default ClusterBoard;","import React from 'react'\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport CreateChooseDialog from '../utils/createChooseDialog'\nimport { useGlobalState } from '../globalState'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { withStyles } from '@material-ui/core/styles';\nimport { BaseTable } from 'ali-react-table'\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport Fade from '@material-ui/core/Fade';\nimport Slider from '@material-ui/core/Slider';\nimport linearInterpolation from '../algorithm/linearInterpolation'\nimport inverseDistanceWeightingInterpolation from '../algorithm/inverseDistanceWeightingInterpolation'\nimport hotDecking from '../algorithm/hotDecking'\nimport deleteNull from '../algorithm/deleteNull'\nimport removeAnomaly from '../algorithm/chebyshev'\nimport HelpIcon from '@material-ui/icons/Help';\nimport getPearsonCoefficient from '../algorithm/pearsonCoefficient'\nimport Cluster from './Cluster'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        marginTop: '10px',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-around',\n        alignItems: 'center',\n        width: '100%',\n    },\n    choose: {\n        color: 'red',\n        fontWeight: 'bold'\n    },\n    require: {\n        display: 'flex',\n        alignItems: 'center'\n    },\n    text: {\n        margin: '10px'\n    },\n    button: {\n        fontSize: '10px'\n    }\n}));\n\nconst IOSSwitch = withStyles((theme) => ({\n    root: {\n        width: 42,\n        height: 26,\n        padding: 0,\n        margin: theme.spacing(1),\n    },\n    switchBase: {\n        padding: 1,\n        '&$checked': {\n            transform: 'translateX(16px)',\n            color: theme.palette.common.white,\n            '& + $track': {\n                backgroundColor: '#52d869',\n                opacity: 1,\n                border: 'none',\n            },\n        },\n        '&$focusVisible $thumb': {\n            color: '#52d869',\n            border: '6px solid #fff',\n        },\n    },\n    thumb: {\n        width: 24,\n        height: 24,\n    },\n    track: {\n        borderRadius: 26 / 2,\n        border: `1px solid ${theme.palette.grey[400]}`,\n        backgroundColor: theme.palette.grey[50],\n        opacity: 1,\n        transition: theme.transitions.create(['background-color', 'border']),\n    },\n    checked: {},\n    focusVisible: {},\n}))(({ classes, ...props }) => {\n    return (\n        <Switch\n            focusVisibleClassName={classes.focusVisible}\n            disableRipple\n            classes={{\n                root: classes.root,\n                switchBase: classes.switchBase,\n                thumb: classes.thumb,\n                track: classes.track,\n                checked: classes.checked,\n            }}\n            {...props}\n        />\n    );\n});\n\n\nconst iOSBoxShadow =\n    '0 3px 1px rgba(0,0,0,0.1),0 4px 8px rgba(0,0,0,0.13),0 0 0 1px rgba(0,0,0,0.02)';\nconst marks = [\n    {\n        value: 0,\n    },\n    {\n        value: 4,\n        label:'3 σ(Sigma)'\n    },\n    {\n        value: 11.1,\n        label:'2 σ(Sigma)'\n    },\n    {\n        value: 25,\n        label:'1 σ(Sigma)'\n    },\n];\n\nconst IOSSlider = withStyles({\n    root: {\n        marginTop: '12px',\n        width: '30vw',\n        color: '#3880ff',\n        height: 2,\n        padding: '15px 0',\n    },\n    thumb: {\n        height: 28,\n        width: 28,\n        backgroundImage: 'radial-gradient(#f5efff, #a594f9, #e5d9f2)',\n        boxShadow: iOSBoxShadow,\n        marginTop: -14,\n        marginLeft: -14,\n        '&:focus, &:hover, &$active': {\n            boxShadow: '0 3px 1px rgba(0,0,0,0.1),0 4px 8px rgba(0,0,0,0.3),0 0 0 1px rgba(0,0,0,0.02)',\n            '@media (hover: none)': {\n                boxShadow: iOSBoxShadow,\n            },\n        },\n    },\n    active: {},\n    valueLabel: {\n        left: 'calc(-50% + 12px)',\n        top: -22,\n        '& *': {\n            background: 'transparent',\n            color: '#000',\n        },\n    },\n    track: {\n        height: 2,\n    },\n    rail: {\n        height: 2,\n        opacity: 0.5,\n        backgroundColor: '#bfbfbf',\n    },\n    mark: {\n        backgroundColor: '#bfbfbf',\n        height: 8,\n        width: 1,\n        marginTop: -3,\n    },\n    markActive: {\n        opacity: 1,\n        backgroundColor: 'currentColor',\n    },\n})(Slider);\n\nconst RemovedTable = (props) => {\n    const { removedElement, columns, hint } = props;\n    // console.log(hint)\n    return (\n        <>\n            {\n                removedElement.length !== 0 ?\n                    <>\n                        <Typography >Removed Elements Table ({removedElement.length} rows)</Typography>\n                        <BaseTable\n                            style={{ maxWidth: 1200, height: 300, overflow: 'auto', fontSize: '15px' }}\n                            dataSource={removedElement}\n                            columns={columns.map(e => {\n                                if (hint[0].column === e) {\n                                    return {\n                                        code: e,\n                                        name: e,\n                                        width: 150,\n                                        align: 'center',\n                                        title: (\n                                            <h2>{e}\n                                                <Tooltip\n                                                    TransitionComponent={Fade}\n                                                    TransitionProps={{ timeout: 600 }}\n                                                    title={\n                                                        `Top Bound: ${hint[0].bound.top};\n                                                        Bottom Bound: ${hint[0].bound.bottom}`}>\n                                                    <HelpIcon fontSize='small' />\n                                                </Tooltip>\n                                            </h2>\n                                        )\n                                    }\n                                }\n                                else {\n                                    return {\n                                        code: e,\n                                        name: e,\n                                        width: 150,\n                                        align: 'center',\n                                        title: (\n                                            <h2>{e}</h2>\n                                        )\n                                    }\n                                }\n                            })}\n                        />\n                    </>\n                    :\n                    ''\n            }\n        </>\n    )\n}\nfunction VariableChoose() {\n    const classes = useStyles()\n    const [state, updateState] = useGlobalState()\n    const [isClear, setIsClear] = React.useState(false)\n    const [relative, setRelative] = React.useState([])\n    const [anomalyDataPercentage, setAnomalyDataPercentage] = React.useState(0)\n    const [removedElement, setRemovedElement] = React.useState(null)\n    const handleTimeColumnChange = (event) => {\n        updateState('timeColumn', event.target.value)\n    };\n    const handleInputColumnChange = (event) => {\n        updateState('inputColumn', event.target.value)\n    };\n    const handleLabelColumnChange = (event) => {\n        updateState('labelColumn', [event.target.value])\n        let tempInputColumn = []\n        let relativeArr = []\n        for (const column of state.column) {\n            if (column === event.target.value || column === state.timeColumn) {\n                continue;\n            }\n            else {\n                let temp = getPearsonCoefficient(state.data4Analyse, column, event.target.value).toFixed(5)\n                relativeArr.push({ column1: event.target.value, column2: column, pearsonCoefficient: temp })\n                if (Math.abs(temp) > 0.8) {\n                    tempInputColumn.push(column)\n                }\n            }\n        }\n        setRelative(relativeArr)\n\n        if (state.inputColumn.length === 0) {  // if the input column array is empty, set it\n            updateState('inputColumn', tempInputColumn)\n        }\n    };\n    const handleProprocessWayChange = (event) => {\n        updateState('proprocessWay', event.target.value)\n    };\n    const handleAnomalyDataPercentageChange = (event, newValue) => {\n        // setTimeout(() => updateState('anomalyDataPercentage', newValue), 0) // avoid ui refresh be blockd\n        setAnomalyDataPercentage(newValue)\n    }\n    const finishAndDataClean = () => {\n        if (state.labelColumn.length !== 0 && state.timeColumn.length !== 0) {\n            updateState('finishChoose', !state.finishChoose)\n            if (!isClear) {\n                setIsClear(true)\n                const columns = JSON.parse(JSON.stringify(state.inputColumn))\n                let tempDataObj;\n                switch (state.proprocessWay) {\n                    case 'Delelt Null':\n                        tempDataObj = JSON.parse(JSON.stringify(state.data4Analyse))\n                        for (const column of columns) {\n                            tempDataObj = deleteNull(tempDataObj, column)\n                        }\n                        tempDataObj = deleteNull(tempDataObj, state.labelColumn)\n                        break;\n                    case 'Linear Interpolation':\n                        tempDataObj = JSON.parse(JSON.stringify(state.data4Analyse))\n                        for (const column of columns) {\n                            tempDataObj = linearInterpolation(tempDataObj, column)\n                        }\n                        tempDataObj = deleteNull(tempDataObj, state.labelColumn)\n                        break;\n                    case 'Inverse Distance Weighting':\n                        tempDataObj = JSON.parse(JSON.stringify(state.data4Analyse))\n                        for (const column of columns) {\n                            tempDataObj = inverseDistanceWeightingInterpolation(tempDataObj, column)\n                        }\n                        tempDataObj = deleteNull(tempDataObj, state.labelColumn)\n                        break;\n                    case 'Hot Decking':\n                        tempDataObj = JSON.parse(JSON.stringify(state.data4Analyse))\n                        tempDataObj = hotDecking(tempDataObj, columns)\n                        tempDataObj = deleteNull(tempDataObj, state.labelColumn)\n                        break;\n                    default:\n                        tempDataObj = JSON.parse(JSON.stringify(state.data4Analyse))\n                        break;\n                }\n                if (anomalyDataPercentage !== 0) {\n                    updateState('anomalyDataPercentage', anomalyDataPercentage)\n                    // console.log(anomalyDataPercentage)\n                    const removeResult = removeAnomaly(tempDataObj, anomalyDataPercentage, [state.labelColumn])\n                    updateState('data4Analyse', removeResult.result)\n                    setRemovedElement(removeResult)\n                }\n                else {\n                    updateState('data4Analyse', tempDataObj)\n                }\n            }\n        }\n        else\n            updateState('finishChoose', false)\n\n    }\n\n    return (\n        <div className={classes.root} >\n            {state.column.length !== 0 ?\n                <>\n                    <Typography className={classes.text} gutterBottom>Please choose data filled way:\n                        <Tooltip\n                            TransitionComponent={Fade}\n                            TransitionProps={{ timeout: 600 }}\n                            title={'Hot Decking can only be used in multiple feature situation! Once you click finish button, you cannot go back unless you refresh the page.Because this choose will make the uploaded data set be changed.'}>\n                            <HelpIcon fontSize='small' />\n                        </Tooltip>\n                    </Typography>\n                    <CreateChooseDialog\n                        disabled={state.finishChoose || isClear ? true : false}\n                        value={state.proprocessWay}\n                        f={handleProprocessWayChange}\n                        element={['Delelt Null', 'Linear Interpolation', 'Inverse Distance Weighting', 'Hot Decking']}\n                        multiple={false}\n                    />\n\n                    <div className={classes.require}>\n                        <Typography color={'secondary'} variant={'h4'}>*</Typography>Please choose time column:\n                    </div>\n                    <CreateChooseDialog\n                        disabled={state.finishChoose ? true : false}\n                        value={state.timeColumn}\n                        f={handleTimeColumnChange}\n                        element={state.column}\n                        multiple={false}\n                    />\n\n\n                    <div className={classes.require}><Typography color={'secondary'} variant={'h4'}>*</Typography>\n                        <Typography gutterBottom>Please choose mining aim column:</Typography>\n                        <Tooltip\n                            TransitionComponent={Fade}\n                            TransitionProps={{ timeout: 600 }}\n                            title={'This column will be what you want to analyse and predict!'}>\n                            <HelpIcon fontSize='small' />\n                        </Tooltip>\n                    </div>\n                    <CreateChooseDialog\n                        disabled={state.finishChoose ? true : false}\n                        value={state.labelColumn}\n                        f={handleLabelColumnChange}\n                        element={state.column}\n                        multiple={false}\n                    />\n\n                    <Typography className={classes.text} gutterBottom>Please choose input features:\n                        <Tooltip\n                            TransitionComponent={Fade}\n                            TransitionProps={{ timeout: 600 }}\n                            title={'The default selection is made by correlation, but can be modified'}>\n                            <HelpIcon fontSize='small' />\n                        </Tooltip>\n                    </Typography>\n                    <CreateChooseDialog\n                        disabled={state.finishChoose ? true : false}\n                        value={state.inputColumn}\n                        f={handleInputColumnChange}\n                        element={state.column}\n                        multiple={true}\n                    />\n\n                    <Cluster relativeArr={relative} />\n\n                    <Typography className={classes.text} gutterBottom>\n                        Anomaly Data Percentage:\n                        <Tooltip\n                            TransitionComponent={Fade}\n                            TransitionProps={{ timeout: 600 }}\n                            title={'Pay attention of using the option! Please estimate the percentage of anomaly data in your dataset before setting this! Once you click finish button, you cannot go back unless you refresh the page.Because this choose will make the uploaded data set be changed.'}>\n                            <HelpIcon fontSize='small' />\n                        </Tooltip>\n                    </Typography>\n                    <IOSSlider\n                        aria-label=\"ios slider\"\n                        disabled={state.finishChoose || isClear ? true : false}\n                        marks={marks}\n                        onChange={handleAnomalyDataPercentageChange}\n                        value={anomalyDataPercentage}\n                        max={25}\n                        valueLabelDisplay=\"on\"\n                    />\n\n                    <Tooltip\n                        TransitionComponent={Fade}\n                        TransitionProps={{ timeout: 600 }}\n                        title={state.labelColumn === '' ? 'You should choose mining aim column and time column at first!' : ''}>\n                        <FormControlLabel\n                            control={\n                                <IOSSwitch\n                                    checked={state.finishChoose}\n                                    onChange={finishAndDataClean}\n                                    name=\"isFinishChoose\" />}\n                            label=\"Finish\"\n                        />\n                    </Tooltip>\n\n                    {\n                        removedElement ?\n                            <RemovedTable\n                                removedElement={removedElement.removedElement}\n                                columns={state.column}\n                                hint={removedElement.hint}\n                            />\n                            :\n                            ''\n                    }\n                </>\n                : ''}\n        </div >\n    )\n}\n\nexport default VariableChoose\n","import React from 'react'\nimport Plot from 'react-plotly.js';\n\n/**\n * create some simple graph like the line, bar graph\n * @param {Array} data a data object array, include x and y attributes\n * @param {String} type the type of the graph like bar, scatter...\n * @param {Number} width the width of the graph\n * @param {Number} height the height of the graph\n * @param {String} xaxis the label of x axis\n * @param {String} yaxis the label of y axis\n * @return {HTMLelement} the HTML element of the graph\n */\nconst createGraph = (data, type, width, height, xaxis, yaxis) => {\n    return (\n        <Plot\n            key={yaxis + xaxis + type}\n            data={data}\n            layout={{\n                // width: width,\n                plot_bgcolor:'rgba(255,255,255,0)',\n                paper_bgcolor:'rgba(255,255,255,0)',\n                height: height,\n                xaxis: {\n                    title: {\n                        text: xaxis,\n                        font: {\n                            family: 'Courier New, monospace',\n                            size: 18,\n                            color: '#7f7f7f'\n                        }\n                    },\n                },\n                yaxis: {\n                    title: {\n                        text: yaxis,\n                        font: {\n                            family: 'Courier New, monospace',\n                            size: 18,\n                            color: '#7f7f7f'\n                        }\n                    }\n                }\n            }}\n        />\n    )\n}\nexport default createGraph\n\n/**\n * create some complex graph\n * @param {Array} data the data of the graph\n * @param {String} key the key of the graph\n * @param {Object} layout the layout of the graph\n * @returns {HTMLelement} the HTML element of the graph\n */\nexport const createComplexGraph = (data, key, layout) => {\n    return (\n        <Plot\n            key={key}\n            data={data}\n            layout={layout}\n        />\n    )\n}","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useGlobalState } from '../globalState'\nimport { createComplexGraph } from '../utils/createGraph'\n\nconst useStyles = makeStyles((theme) => ({\n    graphContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-around',\n        alignItems: 'center',\n    },\n}));\n\nfunction MiniLinePicture() {\n    const [state,] = useGlobalState()\n    const classes = useStyles();\n    const miniLinePictureRef = React.useRef(null)\n    const [innerGraph, setInnerGraph] = React.useState([])\n    React.useEffect(() => {\n        function unpack(rows, key) {\n            return rows.map(function (row) {\n                return row[key];\n            });\n        }\n        if (miniLinePictureRef.current) {\n            let data = []\n            let count = 1;\n            let axis = {\n                showline: true,\n                zeroline: false,\n                showgrid: true,\n                mirror: true,\n                ticklen: 4,\n                gridcolor: '#ffffff',\n                tickfont: { size: 10 },\n            }\n            let layout = {\n                height: 500,\n                title: \"Features Line Graph\",\n                showlegend: false,\n                plot_bgcolor:'rgba(255,255,255,0)',\n                paper_bgcolor:'rgba(255,255,255,0)'\n            }\n            for (const column of state.inputColumn) {\n                let x = unpack(state.data4Analyse, state.timeColumn)\n                let y = unpack(state.data4Analyse, column)\n\n                let obj = {\n                    x: x,\n                    y: y,\n                    xaxis: 'x' + count,\n                    yaxis: 'y' + count,\n                    mode: 'lines',\n                    name: column\n                }\n                layout['xaxis' + count] = Object.assign({ domain: [0.5, 1], anchor: 'y' + count, showticklabels: count === 1 ? true : false }, axis)\n                layout['yaxis' + count] = Object.assign({ domain: [0 + (count - 1) / state.inputColumn.length, count / state.inputColumn.length - 0.02], anchor: 'x' + count, hoverformat: '.2f' }, axis)\n                data.push(obj)\n                count++;\n            }\n            setInnerGraph([createComplexGraph(data, 'miniline', layout)])\n\n            return () => {\n                setInnerGraph([])\n            }\n        }\n    }, [])\n    return (\n        <div ref={miniLinePictureRef} className={classes.graphContainer}>\n            {innerGraph?.map(e => e)}\n        </div>\n    )\n}\nexport default MiniLinePicture\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useGlobalState } from '../globalState'\nimport MiniLinePicture from './MiniLinePicture'\nimport createGraph from '../utils/createGraph'\nimport HelpIcon from '@material-ui/icons/Help';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Fade from '@material-ui/core/Fade';\n\nconst useStyles = makeStyles((theme) => ({\n    graphContainer: {\n        maxWidth: '90vw',\n        overflowX: 'scroll',\n        // marginTop: '10px',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n}));\nfunction LinePicture() {\n    const [state,] = useGlobalState()\n    const classes = useStyles();\n    const linePictureRef = React.useRef(null)\n    const [innerGraph, setInnerGraph] = React.useState([])\n    const width = 400;\n    const height = 500;\n    React.useEffect(() => {\n        if (linePictureRef.current) {\n            const graphArr = []\n            if (state.labelColumn.length !== 0) {\n                let dataArr = [];\n                let yLabel = ''\n                for (const label of state.labelColumn) {\n                    let data = {}\n                    data.x = state.data4Analyse.map((value) => value[state.timeColumn])\n                    data.y = state.data4Analyse.map((value) => value[label])\n                    data.type = 'line'\n                    data.name = label\n                    yLabel.length === 0 ? yLabel += label : yLabel += ', ' + label\n                    dataArr.push(data)\n                }\n                graphArr.push(createGraph(dataArr, 'line', width, height, state.timeColumn, yLabel))\n                setInnerGraph(graphArr)\n            }\n            return () => {\n                setInnerGraph([])\n            }\n        }\n    }, [])\n    return (\n        <div ref={linePictureRef} className={classes.graphContainer}>\n            {innerGraph?.map(e => e)}\n            <Tooltip\n                TransitionComponent={Fade}\n                TransitionProps={{ timeout: 600 }}\n                title={'The graph focus on the change rate of the data. From the graph, you can know the trend of data changing. The graph supports zooming.'}>\n                <HelpIcon fontSize='small' />\n            </Tooltip>\n            {state.inputColumn.length !== 0 ? <MiniLinePicture /> : ''}\n        </div>\n    )\n}\nexport default LinePicture","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useGlobalState } from '../globalState'\nimport createGraph from '../utils/createGraph'\nimport HelpIcon from '@material-ui/icons/Help';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Fade from '@material-ui/core/Fade';\n\nconst useStyles = makeStyles((theme) => ({\n    graphContainer: {\n        maxWidth:'90vw',\n        overflowX:'scroll',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n}));\n\nfunction BarPicture() {\n    const [state,] = useGlobalState()\n    const classes = useStyles();\n    const barPictureRef = React.useRef(null)\n    const [innerGraph, setInnerGraph] = React.useState([])\n    const width = 800;\n    const height = 500;\n    React.useEffect(() => {\n        if (barPictureRef.current) {\n            const graphArr = []\n            if (state.labelColumn.length !== 0) {\n                let dataArr = [];\n                let yLabel = '';\n                if (state.inputColumn.length !== 0) {\n                    for (const input of state.inputColumn) {\n                        let data = {}\n                        data.y = state.data4Analyse.map((value) => value[input])\n                        data.x = state.data4Analyse.map((value) => value[state.timeColumn])\n                        data.type = 'bar'\n                        data.name = input\n                        dataArr.push(data)\n                    }\n                }\n                else{\n                    yLabel = state.labelColumn[0]\n                }\n\n                let output = {}\n                output.x = state.data4Analyse.map((value) => value[state.timeColumn])\n                output.y = state.data4Analyse.map((value) => value[state.labelColumn])\n                output.type = 'bar'\n                output.name = state.labelColumn[0]\n                dataArr.push(output)\n                graphArr.push(createGraph(dataArr, 'bar', width, height, state.timeColumn, yLabel))\n                setInnerGraph(graphArr)\n            }\n            return () => {\n                setInnerGraph([])\n            }\n        }\n    }, [])\n    return (\n        <div ref={barPictureRef} className={classes.graphContainer}>\n            {innerGraph?.map(e => e)}\n            <Tooltip\n                TransitionComponent={Fade}\n                TransitionProps={{ timeout: 600 }}\n                title={'You can zoom and drag this graph to know the difference between different columns!'}>\n                <HelpIcon fontSize='small' />\n            </Tooltip>\n        </div>\n    )\n}\nexport default BarPicture","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useGlobalState } from '../globalState'\nimport createGraph from '../utils/createGraph'\nimport HelpIcon from '@material-ui/icons/Help';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Fade from '@material-ui/core/Fade';\n\nconst useStyles = makeStyles((theme) => ({\n    graphContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n}));\nfunction HistogramsPicture() {\n    const [state,] = useGlobalState()\n    const classes = useStyles();\n    const histogramsPictureRef = React.useRef(null)\n    const [innerGraph, setInnerGraph] = React.useState([])\n    const width = 800;\n    const height = 500;\n    React.useEffect(() => {\n        if (histogramsPictureRef.current) {\n            const graphArr = []\n            if (state.labelColumn.length !== 0) {\n                if (state.inputColumn.length !== 0) {\n                    let dataArr = [];\n                    let yLabel = '';\n                    for (const input of state.inputColumn) {\n                        let data = {}\n                        data.y = state.data4Analyse.map((value) => value[input])\n                        data.x = state.data4Analyse.map((value) => value[state.timeColumn])\n                        data.type = 'histogram2d'\n                        data.name = input\n                        dataArr.push(data)\n                    }\n                    graphArr.push(createGraph(dataArr, 'histogram2d', width, height, state.timeColumn, yLabel))\n                }\n                setInnerGraph(graphArr)\n            }\n            return () => {\n                setInnerGraph([])\n            }\n        }\n    }, [])\n    return (\n        <div ref={histogramsPictureRef} className={classes.graphContainer}>\n            {innerGraph?.map(e => e)}\n            <Tooltip\n                TransitionComponent={Fade}\n                TransitionProps={{ timeout: 600 }}\n                title={'From this graph, you can know the distribution of the data set clearer!'}>\n                <HelpIcon fontSize='small' />\n            </Tooltip>\n        </div>\n    )\n}\nexport default HistogramsPicture","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useGlobalState } from '../globalState'\nimport { createComplexGraph } from '../utils/createGraph'\nimport HelpIcon from '@material-ui/icons/Help';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Fade from '@material-ui/core/Fade';\n\nconst useStyles = makeStyles((theme) => ({\n    graphContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n}));\nconst compare = (a, b) => {\n    if (isNaN(a) && isNaN(b)) {\n        return 0\n    }\n    else {\n        return - parseFloat(a) + parseFloat(b)\n    }\n}\n\nfunction SunburstPicture() {\n    const [state,] = useGlobalState()\n    const classes = useStyles();\n    const sunburstPictureRef = React.useRef(null)\n    const [innerGraph, setInnerGraph] = React.useState([])\n    React.useEffect(() => {\n        function unpack(rows, key) {\n            return rows.map(function (row) {\n                return row[key];\n            });\n        }\n        if (sunburstPictureRef.current) {\n            let layout = {\n                margin: { l: 0, r: 0, b: 0, t: 0 },\n                width: 500,\n                height: 500,\n                plot_bgcolor: 'rgba(255,255,255,0)',\n                paper_bgcolor: 'rgba(255,255,255,0)'\n            };\n            let values = [, ...unpack(state.data4Analyse, state.labelColumn)]\n            const centerText = state.labelColumn\n            let labels = [centerText, ...unpack(state.data4Analyse, state.timeColumn)]\n\n            if (state.data4Analyse.length > 150) {\n                values = values.sort(compare)\n                values = [...values.slice(0, 75), ...values.slice(-75, -1)]\n                labels = labels.slice(0, 150)\n            }\n\n            const parents = labels.map(e => {\n                return e === centerText ? \"\" : centerText\n            })\n\n\n\n            const data = [{\n                type: \"sunburst\",\n                labels: labels,\n                parents: parents,\n                values: values,\n                outsidetextfont: { size: 20, color: \"#377eb8\" },\n                leaf: { opacity: 0.4 },\n                marker: { line: { width: 2 } },\n            }];\n            setInnerGraph([createComplexGraph(data, 'Sunburst', layout)])\n\n        }\n        return () => {\n            setInnerGraph([])\n        }\n    }, [])\n    return (\n        <div ref={sunburstPictureRef} className={classes.graphContainer}>\n            {innerGraph?.map(e => e)}\n            <Tooltip\n                TransitionComponent={Fade}\n                TransitionProps={{ timeout: 600 }}\n                title={'This graph use a clear way to show you the difference of output column!'}>\n                <HelpIcon fontSize='small' />\n            </Tooltip>\n        </div>\n    )\n}\nexport default SunburstPicture","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useGlobalState } from '../globalState'\nimport createGraph from '../utils/createGraph'\nimport HelpIcon from '@material-ui/icons/Help';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Fade from '@material-ui/core/Fade';\n\nconst useStyles = makeStyles((theme) => ({\n    graphContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n}));\nfunction ParallelCoordinatesPicture() {\n    const [state,] = useGlobalState()\n    const classes = useStyles();\n    const parallelCoordinatesPictureRef = React.useRef(null)\n    const [innerGraph, setInnerGraph] = React.useState([])\n    const width = 800;\n    const height = 500;\n    React.useEffect(() => {\n        function unpack(rows, key) {\n            return rows.map(function (row) {\n                return row[key];\n            });\n        }\n        if (parallelCoordinatesPictureRef.current) {\n            let data = [{\n                type: 'parcoords',\n                line: {\n                    showscale: true,\n                    reversescale: true,\n                    colorscale: 'Jet',\n                    cmin: -4000,\n                    cmax: -100,\n                },\n\n                dimensions: []\n            }];\n            let count = 0;\n            for (const column of state.inputColumn) {\n                let value = unpack(state.data4Analyse, column)\n                let obj\n                if (count === 0) {\n                    obj = {\n                        constraintrange: [Math.min(...value), (Math.max(...value) - Math.min(...value)) / 2],\n                        range: [Math.min(...value), Math.max(...value)],\n                        label: column,\n                        values: unpack(state.data4Analyse, column)\n                    }\n                    count++;\n                } else {\n                    obj = {\n                        range: [Math.min(...value), Math.max(...value)],\n                        label: column,\n                        values: unpack(state.data4Analyse, column)\n                    }\n                }\n                data[0].dimensions.push(obj)\n            }\n            setInnerGraph([createGraph(data, 'parcoords', width, height, \"\", '')])\n\n            return () => {\n                setInnerGraph([])\n            }\n        }\n    }, [])\n    return (\n        <>\n            {state.inputColumn.length > 1 ?\n                <div ref={parallelCoordinatesPictureRef} className={classes.graphContainer}>\n                    {innerGraph?.map(e => e)}\n                    <Tooltip\n                        TransitionComponent={Fade}\n                        TransitionProps={{ timeout: 600 }}\n                        title={'The graph focus on the relationship between the each feature. You can try to add, move and remove purple bar(s) to get more details.'}>\n                        <HelpIcon fontSize='small' />\n                    </Tooltip>\n                </div>\n                :\n                ''\n            }\n        </>\n    )\n}\nexport default ParallelCoordinatesPicture","import React from 'react'\nimport { BaseTable } from 'ali-react-table'\nimport { useGlobalState } from '../globalState'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { max, min, sum, mean, median, variance, deviation } from 'd3-array';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpIcon from '@material-ui/icons/Help';\nimport Fade from '@material-ui/core/Fade';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n    tableContainer: {\n        // margin: '5px',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center'\n    }\n}));\nfunction DataOverviewTable() {\n    const [state, updateState] = useGlobalState()\n    const classes = useStyles()\n    React.useEffect(() => {\n        // detect the time column\n        if (state.timeColumn === '') {\n            let timeColumn = ''\n            for (const column of state.column) {\n                timeColumn = state.data4Analyse.every((value) => {\n                    return isNaN(value[column])\n                }) ? column : ''\n                if (timeColumn !== '') {\n                    break\n                }\n            }\n            updateState('timeColumn', timeColumn)\n        }\n    }, [state.data4Analyse])\n    return (\n        <div className={classes.tableContainer}>\n            {state.data4Analyse ?\n                <>\n                    <Typography>Data Set Table ({state.data4Analyse.length} rows)</Typography>\n                    <BaseTable\n                        style={{ maxWidth: 1200, height: 600, overflow: 'auto', fontSize: '15px' }}\n                        dataSource={state.data4Analyse}\n                        columns={state.column.map(e => {\n                            return {\n                                code: e,\n                                name: e,\n                                width: 150,\n                                align: 'center',\n                                title: (\n                                    <h2>{e}\n                                        {e !== state.timeColumn ?\n                                            <Tooltip\n                                                TransitionComponent={Fade}\n                                                TransitionProps={{ timeout: 600 }}\n                                                title={\n                                                    (`\n                                            max:       ${max(state.data4Analyse, (d) => parseFloat(d[e])).toFixed(2)}\\t\n                                            min:       ${min(state.data4Analyse, (d) => parseFloat(d[e])).toFixed(2)}\\t\n                                            sum:       ${sum(state.data4Analyse, (d) => parseFloat(d[e])).toFixed(2)}\\t\n                                            mean:      ${mean(state.data4Analyse, (d) => parseFloat(d[e])).toFixed(2)}\\t\n                                            median:    ${median(state.data4Analyse, (d) => parseFloat(d[e])).toFixed(2)}\\t\n                                            variance:  ${variance(state.data4Analyse, (d) => parseFloat(d[e])).toFixed(2)}\\t\n                                            deviation: ${deviation(state.data4Analyse, (d) => parseFloat(d[e])).toFixed(2)}\n                                            `)\n                                                }>\n                                                <HelpIcon fontSize='small' />\n                                            </Tooltip>\n                                            :\n                                            ''\n                                        }\n                                    </h2>\n                                )\n                            }\n                        })}\n                    />\n                </>\n                :\n                ''\n            }\n        </div>\n    )\n}\n\nexport default DataOverviewTable\n","import React from 'react'\nimport { useGlobalState } from '../globalState'\nimport VariableChoose from '../components/VariableChoose'\nimport LinePicture from '../components/LinePicture'\nimport BarPicture from '../components/BarPicture'\nimport HistogramsPicture from '../components/HistogramsPicture'\nimport SunburstPicture from '../components/SunburstPicture'\nimport ParallelCoordinatesPicture from '../components/ParallelCoordinatesPicture'\nimport DataOverviewTable from '../components/DataOverviewTable'\n\n\nfunction VisualizationPage() {\n    const [state,] = useGlobalState()\n    return (\n        <>\n            <div>\n                <DataOverviewTable />\n                {/* <Divider variant=\"middle\" /> */}\n                <VariableChoose />\n            </div>\n            {state.finishChoose ?\n                <>\n                    <LinePicture />\n                    <BarPicture />\n                    <HistogramsPicture />\n                    <ParallelCoordinatesPicture />\n                    <SunburstPicture />\n                </>\n                :\n                ''\n            }\n        </>\n    )\n}\n\nexport default VisualizationPage\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useGlobalState } from '../globalState'\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Input from '@material-ui/core/Input';\nimport CropLandscapeIcon from '@material-ui/icons/CropLandscape';\nimport FilterNoneIcon from '@material-ui/icons/FilterNone'; \nimport SpeedIcon from '@material-ui/icons/Speed'; \nimport RepeatIcon from '@material-ui/icons/Repeat';\nimport PhotoSizeSelectSmallIcon from '@material-ui/icons/PhotoSizeSelectSmall'; \n\nconst useStyles = makeStyles({\n    root: {\n        width: 250,\n    },\n    input: {\n        width: 60,\n    },\n});\n\n/**\n * create a choose bar\n * @param {Object} props an object include the type, maximum value, minimum value and modify step\n * @returns {HTMLelemt} the HTML element of the choose bar\n */\nconst CreateChooseBar = (props) => {\n    const classes = useStyles();\n    const [state, updateState] = useGlobalState()\n    const { type, min, max, step, defaultNum } = props\n    const [value, setValue] = React.useState(defaultNum);\n\n    const update = (newValue) => {\n        switch (type) {\n            case 'Window Size':\n                updateState('windowSize', newValue)\n                break;\n            case 'Number of Hidden Layer':\n                updateState('hiddenLayers', newValue)\n                break;\n            case 'Epochs':\n                updateState('epochs', newValue)\n                break;\n            case 'Learning Rate':\n                updateState('learnRate', newValue)\n                break;\n            case 'Training Dataset Size (%)':\n                updateState('trainingDataSize', newValue)\n                break;\n            default:\n                break\n        }\n    }\n\n    React.useEffect(() => {\n        update(value)\n    }, [state.finishSet])\n\n    const handleSliderChange = (event, newValue) => {\n        if (!state.finishSet)\n            setValue(newValue);\n    };\n\n    const handleInputChange = (event) => {\n        if (!state.finishSet)\n            setValue(event.target.value === '' ? '' : Number(event.target.value));\n    };\n\n    const handleBlur = () => {\n        if (!state.finishSet)\n            if (value < min) {\n                setValue(min);\n            } else if (value > max) {\n                setValue(max);\n            }\n    };\n\n    return (\n        <div className={classes.root}>\n            <Typography id=\"input-slider\" gutterBottom color={'secondary'} variant={'body2'}>\n                {type}\n            </Typography>\n            <Grid container spacing={2} alignItems=\"center\">\n                <Grid item>\n                    {\n                        type === 'Window Size' ?\n                            <CropLandscapeIcon />\n                            :\n                            type === 'Number of Hidden Layer' ?\n                                <FilterNoneIcon />\n                                :\n                                type === 'Epochs' ?\n                                    <RepeatIcon />\n                                    :\n                                    type === 'Learning Rate' ?\n                                        <SpeedIcon />\n                                        :\n                                        <PhotoSizeSelectSmallIcon />\n\n                    }\n                </Grid>\n                <Grid item xs>\n                    <Slider\n                        value={typeof value === 'number' ? value : defaultNum}\n                        onChange={handleSliderChange}\n                        min={min}\n                        max={max}\n                        step={step}\n                        aria-labelledby=\"input-slider\"\n                    />\n                </Grid>\n                <Grid item>\n                    <Input\n                        className={classes.input}\n                        value={value}\n                        margin=\"dense\"\n                        onChange={handleInputChange}\n                        onBlur={handleBlur}\n                        inputProps={{\n                            step: step,\n                            min: min,\n                            max: max,\n                            type: 'number',\n                            'aria-labelledby': 'input-slider',\n                        }}\n                    />\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\nexport default CreateChooseBar","import * as tf from '@tensorflow/tfjs'\nimport * as tfvis from '@tensorflow/tfjs-vis'\n\n/**\n * bulid input features and output label\n * @param {Array} data data, 1 dimension array\n * @param {Number} windowSize window size of the data\n * @returns {Array} the result of input and output\n */\nfunction computeInputAndOutput(data, windowSize) {\n    {\n        let max = Math.max(...data)\n        let min = Math.min(...data)\n        data = data.map(value => (value - min) / (max - min))\n    } // normalisation \n\n    const result = []\n    for (let i = 0; i <= data.length - windowSize - 1; i++) {\n        result.push({ x: data.slice(i, i + windowSize), y: data[i + windowSize + 1] })\n    }\n    return result\n}\n\n/**\n * build the nerual network of 1 dimension feature\n * @param {Array} data input data\n * @param {Number} windowSize window size of the data\n * @param {Number} epochs numbers of training epochs\n * @param {Number} learningRate learning rate\n * @param {Number} layers numbers of hidden layers\n * @param {Number} trainingDataSize training data size\n * @returns {Object} the model of the network\n */\nexport const trainSimpleModel = async (data, windowSize, epochs, learningRate, layers, trainingDataSize) => {\n    console.log('trainSimpleModel')\n    let data2 = computeInputAndOutput(data, windowSize)\n    const x = data2.map(e => e.x)\n    const y = data2.map(e => e.y)\n    const inputX = x.slice(0, Math.floor(trainingDataSize / 100 * x.length))\n    const inputY = y.slice(0, Math.floor(trainingDataSize / 100 * y.length))\n\n    const inputLayerShape = windowSize\n    const lstmNeurons = 20\n    const lstmInputLayerFeatures = 10\n    const lstmInputLayerTimesteps = lstmNeurons / lstmInputLayerFeatures\n\n    const lstmInputShape = [lstmInputLayerFeatures, lstmInputLayerTimesteps]\n    const lstmOutputNeurons = 20\n\n    const lstmBatchSize = windowSize\n    const outputLayerShape = lstmOutputNeurons\n    const outputLayerNeurons = 1\n\n    const input = tf.tensor2d(inputX, [inputX.length, inputX[0].length])\n    const output = tf.tensor2d(inputY, [inputY.length, 1]).reshape([inputY.length, 1])\n    const model = tf.sequential()\n    model.add(tf.layers.dense({ units: lstmNeurons, inputShape: [inputLayerShape] }))\n\n    model.add(tf.layers.reshape({ targetShape: lstmInputShape }))\n    if (layers !== 1) {\n        model.add(tf.layers.lstm({\n            units: lstmNeurons,\n            inputShape: lstmInputShape,\n            returnSequences: true\n        }))\n\n        for (let i = 1; i < layers - 1; i++) {\n            model.add(tf.layers.lstm({\n                units: lstmNeurons,\n                returnSequences: true\n            }))\n        }\n        model.add(tf.layers.lstm({\n            units: lstmNeurons,\n            returnSequences: false\n        }))\n    }\n    else {\n        model.add(tf.layers.lstm({\n            units: lstmNeurons,\n            inputShape: lstmInputShape,\n            returnSequences: false\n        }))\n    }\n\n    model.add(tf.layers.dense({ units: outputLayerNeurons, inputShape: [outputLayerShape] }))\n\n    model.compile({\n        optimizer: tf.train.adam(learningRate),\n        loss: 'meanSquaredError'\n    });\n\n    const modelResult = await model.fit(input, output, {\n        batchSize: lstmBatchSize,\n        epochs: epochs,\n        callbacks: tfvis.show.fitCallbacks(\n            { name: 'RESULTs' },\n            ['loss', 'acc'],\n            { callbacks: ['onEpochEnd', 'onBatchEnd'] }\n        )\n    })\n    const modelSummary = { name: 'Model Summary', tab: 'Model Inspection' };\n    tfvis.show.modelSummary(modelSummary, model);\n\n    return { model: model, modelResult: modelResult }\n}\n\n\n/**\n * build the nerual network with multiple input features\n * @param {Array} data input data\n * @param {Number} windowSize window size of input \n * @param {Number} epochs numbers of training epochs\n * @param {Number} learningRate learning rate\n * @param {Number} layers network layers\n * @param {Number} trainingDataSize training data size\n * @param {Array} inputColumn feature column name array\n * @param {String} labelColumn output column name\n * @returns {Object} the model of the network\n */\nexport const trainComplexModel = async (data, windowSize, epochs, learningRate, layers, trainingDataSize, inputColumn, labelColumn) => {\n    console.log('trainComplexModel')\n    let data1 = [] \n    for (const column of inputColumn) {\n        data1.push(computeSimpleMoveAverage(data.map(value => parseFloat(value[column])), windowSize).map(e => e.x)) // 对每一个变量进行特者提取\n    }\n\n    let data2 = computeSimpleMoveAverage(data.map(value => parseFloat(value[labelColumn])), windowSize)\n    data1.push(data2.map(e => e.x))\n    const x = []\n    const y = data2.map(e => e.y)\n    for (let index1 = 0; index1 < data1[0].length; index1++) { \n        let tempArr = [] \n        for (let index2 = 0; index2 < data1.length; index2++) {\n            tempArr.push(data1[index2][index1])\n        }\n        x.push(tempArr)\n    }\n    const inputX = x.slice(0, Math.floor(trainingDataSize / 100 * x.length))\n    const inputY = y.slice(0, Math.floor(trainingDataSize / 100 * y.length))\n\n    const inputLayerShape = inputColumn.length + 1\n    const lstmNeurons = 20\n    const lstmInputLayerFeatures = 10\n    const lstmInputLayerTimesteps = lstmNeurons / lstmInputLayerFeatures\n\n    const lstmInputShape = [lstmInputLayerFeatures, lstmInputLayerTimesteps]\n    const lstmOutputNeurons = 20\n\n    const lstmBatchSize = windowSize\n    const outputLayerShape = lstmOutputNeurons\n    const outputLayerNeurons = 1\n\n    const input = tf.tensor2d(inputX)\n    const output = tf.tensor2d(inputY, [inputY.length, 1]).reshape([inputY.length, 1])  // [X]\n    const model = tf.sequential()\n    model.add(tf.layers.dense({ units: lstmNeurons, inputShape: [inputLayerShape] }))\n\n    model.add(tf.layers.reshape({ targetShape: lstmInputShape }))\n    if (layers !== 1) {\n        model.add(tf.layers.lstm({\n            units: lstmNeurons,\n            inputShape: lstmInputShape,\n            returnSequences: true\n        }))\n\n        for (let i = 1; i < layers - 1; i++) {\n            model.add(tf.layers.lstm({\n                units: lstmNeurons,\n                returnSequences: true\n            }))\n        }\n        model.add(tf.layers.lstm({\n            units: lstmNeurons,\n            returnSequences: false\n        }))\n    }\n    else {\n        model.add(tf.layers.lstm({\n            units: lstmNeurons,\n            inputShape: lstmInputShape,\n            returnSequences: false\n        }))\n    }\n\n    model.add(tf.layers.dense({ units: outputLayerNeurons, inputShape: [outputLayerShape] }))\n\n    model.compile({\n        optimizer: tf.train.adam(learningRate),\n        loss: tf.losses.huberLoss,\n    });\n\n    const modelResult = await model.fit(input, output, {\n        batchSize: lstmBatchSize,\n        epochs: epochs,\n        callbacks: tfvis.show.fitCallbacks(\n            { name: 'RESULTs' },\n            ['loss'],\n            { callbacks: ['onEpochEnd', 'onBatchEnd'] }\n        )\n    })\n    const modelSummary = { name: 'Model Summary', tab: 'Model Inspection' };\n    tfvis.show.modelSummary(modelSummary, model);\n\n    return { model: model, modelResult: modelResult }\n}\n\n/**\n * descending dimension of the input data base on simple move average\n * @param {Array} data input data\n * @param {Number} windowSize window size of the data\n * @returns {Array} the feature and ouput before handling\n */\nfunction computeSimpleMoveAverage(data, windowSize) {\n    {\n        let max = Math.max(...data)\n        let min = Math.min(...data)\n        data = data.map(value => (value - min) / (max - min))\n    }\n\n    const result = []\n    for (let i = 0; i <= data.length - windowSize - 1; i++) {\n        let currentAverage = 0\n        let t = i + windowSize \n        for (let k = i; k < t && k <= data.length; k++) {\n            currentAverage += data[k]\n        }\n        currentAverage /= windowSize \n        result.push({ x: currentAverage, y: data[i + windowSize + 1] })\n    }\n    return result\n}\n\n\n/**\n * use training data and model get the output \n * @param {Array} input input data\n * @param {Model} model the mode\n * @param {Number} windowSize window size of the data\n * following parameters only used by the complex model\n * @param {Boolean} isComplex whether is a complex model\n * @param {Array} inputColumn feature column name array\n * @param {String} labelColumn label column name\n * @returns {Array} the result of prediction\n */\nexport const predictionsOfNow = (input, model, windowSize, isComplex, inputColumn, labelColumn) => {\n    let x\n    if (!isComplex) {\n        input = computeInputAndOutput(input, windowSize)\n        input = input.map(e => e.x)\n        x = tf.tensor2d(input, [input.length, input[0].length])\n    }\n    else {\n        let data1 = []\n        for (const column of inputColumn) {\n            data1.push(computeSimpleMoveAverage(input.map(value => parseFloat(value[column])), windowSize).map(e => e.x)) // 对每一个变量进行特者提取\n        }\n\n        let data2 = computeSimpleMoveAverage(input.map(value => parseFloat(value[labelColumn])), windowSize)\n        data1.push(data2.map(e => e.x))\n        const xInput = []\n        for (let index1 = 0; index1 < data1[0].length; index1++) {\n            let tempArr = [] \n            for (let index2 = 0; index2 < data1.length; index2++) {\n                tempArr.push(data1[index2][index1])\n            }\n            xInput.push(tempArr)\n        }\n        x = tf.tensor2d(xInput)\n    }\n    const predictedResults = model.predict(x);\n    return Array.from(predictedResults.dataSync());\n}\n\n/**\n * predict the data of the next time node\n * @param {Array} input input data\n * @param {Model} model the model of the trained network\n * @param {Number} windowSize window size of the data\n * @param {Number} trainingDataSize training data set\n * @returns {Array} the output array\n */\nexport const makePredictions = (input, model, windowSize, trainingDataSize, isComplex, inputColumn, labelColumn) => {\n    let x\n    if (!isComplex) {\n        input = computeInputAndOutput(input, windowSize)\n        input = input.map(e => e.x).slice(Math.floor(trainingDataSize / 100 * input.length), input.length)\n        input = [input[input.length - 1]]\n        x = tf.tensor2d(input, [input.length, input[0].length])\n    }\n    else {\n        let data1 = []\n        for (const column of inputColumn) {\n            data1.push(computeSimpleMoveAverage(input.map(value => parseFloat(value[column])), windowSize).map(e => e.x)) // 对每一个变量进行特者提取\n        }\n\n        let data2 = computeSimpleMoveAverage(input.map(value => parseFloat(value[labelColumn])), windowSize)\n        data1.push(data2.map(e => e.x))\n        let xInput = []\n        for (let index1 = 0; index1 < data1[0].length; index1++) { \n            let tempArr = [] \n            for (let index2 = 0; index2 < data1.length; index2++) { \n                tempArr.push(data1[index2][index1])\n            }\n            xInput.push(tempArr)\n        }\n        xInput = [xInput[xInput.length - 1]]\n        x = tf.tensor2d(xInput)\n    }\n    const predictedResults = model.predict(x);\n    return Array.from(predictedResults.dataSync());\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useGlobalState } from '../globalState'\nimport { withStyles } from '@material-ui/core/styles';\nimport CreateChooseBar from '../utils/createChooseBar'\nimport Paper from '@material-ui/core/Paper';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Button from '@material-ui/core/Button';\nimport HelpIcon from '@material-ui/icons/Help';\nimport Fade from '@material-ui/core/Fade';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Typography from '@material-ui/core/Typography';\nimport { trainComplexModel, trainSimpleModel } from '../utils/machineLearn'\n\nconst useStyles = makeStyles({\n    root: {\n        marginTop: '10px',\n        marginBottom: '10px',\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    paper: {\n        backgroundColor: '#f2e8cf',\n        width: '90%',\n        padding: '10px',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-around',\n        alignItems: 'center'\n    },\n    buttons:{\n        display: 'flex',\n        justifyContent: 'space-around',\n        alignItems: 'center',\n        width:'600px'\n    }\n\n});\n\n\n\nconst IOSSwitch = withStyles((theme) => ({\n    root: {\n        width: 42,\n        height: 26,\n        padding: 0,\n        margin: theme.spacing(1),\n    },\n    switchBase: {\n        padding: 1,\n        '&$checked': {\n            transform: 'translateX(16px)',\n            color: theme.palette.common.white,\n            '& + $track': {\n                backgroundColor: '#52d869',\n                opacity: 1,\n                border: 'none',\n            },\n        },\n        '&$focusVisible $thumb': {\n            color: '#52d869',\n            border: '6px solid #fff',\n        },\n    },\n    thumb: {\n        width: 24,\n        height: 24,\n    },\n    track: {\n        borderRadius: 26 / 2,\n        border: `1px solid ${theme.palette.grey[400]}`,\n        backgroundColor: theme.palette.grey[50],\n        opacity: 1,\n        transition: theme.transitions.create(['background-color', 'border']),\n    },\n    checked: {},\n    focusVisible: {},\n}))(({ classes, ...props }) => {\n    return (\n        <Switch\n            focusVisibleClassName={classes.focusVisible}\n            disableRipple\n            classes={{\n                root: classes.root,\n                switchBase: classes.switchBase,\n                thumb: classes.thumb,\n                track: classes.track,\n                checked: classes.checked,\n            }}\n            {...props}\n        />\n    );\n});\n\nfunction MachineLearnPage() {\n    const [state, updateState] = useGlobalState()\n    const classes = useStyles()\n    const [modelTraining, setModelTraining] = React.useState(false)\n    // TODO 将默认值和 globalState 中的值进行绑定\n    const setting = [\n        { type: 'Window Size', min: 1, max: 100, defaultNum: 20, step: 1 },\n        { type: 'Number of Hidden Layer', min: 1, max: 50, defaultNum: 4, step: 1 },\n        { type: 'Epochs', min: 5, max: 500, defaultNum: 20, step: 1 },\n        { type: 'Learning Rate', min: 0.01, max: 10, defaultNum: 0.05, step: 0.01 },\n        { type: 'Training Dataset Size (%)', min: 1, max: 100, defaultNum: 80, step: 1 },\n\n    ]\n    const startTraining = async () => {\n        setModelTraining(true)\n        const column = state.labelColumn\n        const data = state.data4Analyse.map(value => parseFloat(value[column]))\n        // if (state.model !== '') // exit if the model is trainied\n        //     return\n        if (state.inputColumn.length !== 0) {\n            const { model, modelResult } = await trainComplexModel(\n                state.data4Analyse,\n                state.windowSize,\n                state.epochs,\n                state.learningRate,\n                state.hiddenLayers,\n                state.trainingDataSize,\n                state.inputColumn,\n                column\n            )\n            updateState('model', model)\n            updateState('modelResult', modelResult)\n        }\n        else {\n            const { model, modelResult } = await trainSimpleModel(\n                data,\n                state.windowSize,\n                state.epochs,\n                state.learningRate,\n                state.hiddenLayers,\n                state.trainingDataSize\n            )\n            updateState('model', model)\n            updateState('modelResult', modelResult)\n        }\n        setModelTraining(false)\n    }\n    const clearModel = () => {\n        updateState('model', '')\n        updateState('modelResult', '')\n    }\n    return (\n        <div className={classes.root}>\n            {state.finishChoose ?\n                <Paper elevation={3} className={classes.paper}>\n                    <Typography color={'secondary'} variant={'subtitle2'}>\n                        If you do not know the means or these chooses\n                        <Tooltip\n                            TransitionComponent={Fade}\n                            TransitionProps={{ timeout: 600 }}\n                            title={'In general, a precise model needs bigger window size, more hidden layers, more epochs, less learning rate and more data! But please consider these options according the requirements and machine performance!'}>\n                            <HelpIcon fontSize='small' />\n                        </Tooltip>\n                        , Please use the default values!!\n                    </Typography>\n                    <Typography variant={'h5'}>\n                        Model training setting:\n                    </Typography>\n                    {\n                        setting.map((value, index) =>\n                            <CreateChooseBar\n                                key={index}\n                                type={value.type}\n                                min={value.min}\n                                max={value.max}\n                                defaultNum={value.defaultNum}\n                                step={value.step}\n                            />\n                        )\n                    }\n                    <FormControlLabel\n                        control={\n                            <IOSSwitch\n                                checked={state.finishSet}\n                                onChange={() => updateState('finishSet', !state.finishSet)}\n                                name=\"isFinish\" />}\n                        label=\"Finish\"\n                    />\n                    <div className={classes.buttons}>\n                        <Button variant=\"contained\" color=\"primary\" disabled={state.finishSet && state.model === '' && !modelTraining ? false : true} onClick={startTraining}>Start Training</Button>\n                        <Button variant=\"contained\" color=\"secondary\" disabled={state.model === '' ? true : false} onClick={clearModel}>Clear exist model</Button>\n                    </div>\n                </Paper>\n                :\n                ''\n            }\n        </div>\n    )\n}\n\nexport default MachineLearnPage\n\n","import React from 'react'\nimport { useGlobalState } from '../globalState'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { predictionsOfNow } from '../utils/machineLearn'\nimport createGraph from '../utils/createGraph'\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\n\nconst useStyles = makeStyles((theme) => ({\n    graphContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-around',\n        alignItems: 'center',\n    },\n    card: {\n        marginTop: '10px',\n        height: '50px',\n        display: 'flex',\n        backgroundColor: \"skyblue\",\n        alignContent: 'center',\n        justifyContent: 'center'\n    }\n}));\n\nfunction LearningResultPage() {\n    const [state,] = useGlobalState()\n    const classes = useStyles()\n    const [newData, setNewData] = React.useState(null)\n    const [nextDayData, setNextDayData] = React.useState(null)\n    React.useEffect(() => {\n        if (state.model !== '') {\n            if (state.inputColumn.length === 0) {\n                const column = state.labelColumn\n                const data = state.data4Analyse.map(value => parseFloat(value[column]))\n                let max = Math.max(...data)\n                let min = Math.min(...data)\n                let tempData = []\n                let prefix = []\n                let suffix = []\n                for (let index = 0; index < state.windowSize + 1; index++) {\n                    prefix.push(NaN)\n                }\n                const modelPredictData = prefix.concat(predictionsOfNow(data, state.model, state.windowSize).map(e => e * (max - min) + min))\n                const divide = Math.floor(modelPredictData.length * state.trainingDataSize / 100)\n                for (let index = divide; index < state.data4Analyse.length; index++) {\n                    suffix.push(NaN)\n                }\n                let prefix2 = []\n                for (let index = 0; index < divide; index++) {\n                    prefix2.push(NaN)\n                }\n\n                tempData.push({\n                    x: state.data4Analyse.map((value) => value[state.timeColumn]),\n                    y: data,\n                    type: 'line',\n                    name: 'Origin Data'\n                })\n                tempData.push({\n                    x: (state.data4Analyse.map((value) => value[state.timeColumn])),\n                    y: modelPredictData.slice(0, divide).concat(suffix),\n                    type: 'line',\n                    name: 'Given by this Model'\n                })\n                tempData.push({\n                    x: (state.data4Analyse.map((value) => value[state.timeColumn])),\n                    y: prefix2.concat(modelPredictData.slice(divide, -1)),\n                    type: 'line',\n                    name: 'Validation of this Model'\n                })\n\n                setNewData(tempData)\n                setNextDayData(modelPredictData[modelPredictData.length - 1])\n            }\n            else {\n                const column = state.labelColumn\n                const data = state.data4Analyse.map(value => parseFloat(value[column]))\n                let max = Math.max(...data)\n                let min = Math.min(...data)\n                let tempData = []\n                let prefix = []\n                let suffix = []\n                for (let index = 0; index < state.windowSize + 1; index++) {\n                    prefix.push(NaN)\n                }\n                const modelPredictData = prefix.concat(predictionsOfNow(state.data4Analyse, state.model, state.windowSize, true, state.inputColumn, state.labelColumn).map(e => e * (max - min) + min))\n                const divide = Math.floor(modelPredictData.length * state.trainingDataSize / 100)\n                for (let index = divide; index < state.data4Analyse.length; index++) {\n                    suffix.push(NaN)\n                }\n                let prefix2 = []\n                for (let index = 0; index < divide; index++) {\n                    prefix2.push(NaN)\n                }\n\n                tempData.push({\n                    x: state.data4Analyse.map((value) => value[state.timeColumn]),\n                    y: data,\n                    type: 'line',\n                    name: 'Origin Data'\n                })\n                tempData.push({\n                    x: (state.data4Analyse.map((value) => value[state.timeColumn])),\n                    y: modelPredictData.slice(0, divide).concat(suffix),\n                    type: 'line',\n                    name: 'Given by this Model'\n                })\n                tempData.push({\n                    x: (state.data4Analyse.map((value) => value[state.timeColumn])),\n                    y: prefix2.concat(modelPredictData.slice(divide, -1)),\n                    type: 'line',\n                    name: 'Validation of this Model'\n                })\n\n                setNewData(tempData)\n                setNextDayData(modelPredictData[modelPredictData.length - 1])\n            }\n        }\n        return ()=>{\n            setNewData(null)\n            setNextDayData(null)\n        }\n    }, [state.model])\n    return (\n        <div className={classes.graphContainer}>\n            {newData ? createGraph(newData, 'line', 800, 500, state.timeColumn, state.labelColumn[0]) : ''}\n            {nextDayData ?\n                <Card className={classes.card}>\n                    <CardContent>\n                        {`At the next time node, ${state.labelColumn[0]} will be ${nextDayData}`}\n                    </CardContent>\n                </Card>\n                :\n                ''\n            }\n\n        </div>\n    )\n}\n\nexport default LearningResultPage\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport './App.css';\nimport { GlobalStateProvider } from \"./globalState\";\nimport { useKbn } from \"use-kbn\";\nimport UploadPage from './subPages/UploadPage'\nimport IntroductionPage from './subPages/IntroductionPage'\nimport VisualizationPage from './subPages/VisualizationPage'\nimport MachineLearnPage from './subPages/MachineLearnPage'\nimport LearningResultPage from './subPages/LearningResultPage'\nimport { init as ConsoleBan } from 'console-ban'\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: '30px auto',\n    width: '90vw',\n    backgroundImage: 'linear-gradient(to bottom, #5b61e5 0%, #e9c1db 49%, #ffe8c9 100%)'\n    // backgroundImage: 'linear-gradient(-225deg, #7085B6 0%, #87A7D9 50%, #DEF3F8 100%)'\n  },\n}));\nfunction App() {\n  const classes = useStyles();\n  const { element } = useKbn(\n    \"/model/platelet/model.json\",\n    'hello world',\n    400,\n    500\n  );\n  React.useEffect(()=>{\n    ConsoleBan({\n      redirect: 'https://github.com/GiorgioPeng'\n    })\n  })\n  return (\n    <GlobalStateProvider>\n      <Paper className={classes.root}>\n        <IntroductionPage />\n        <UploadPage />\n        <VisualizationPage />\n        <MachineLearnPage />\n        <LearningResultPage />\n      </Paper>\n      {element}\n    </GlobalStateProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}